"use strict";
// This file was auto-generated by @joelek/autoguard. Edit at own risk.
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeServer = void 0;
const autoguard = require("@joelek/autoguard/dist/lib-server");
const shared = require("./index");
const makeServer = (routes, serverOptions) => {
    let endpoints = new Array();
    endpoints.push((raw, auxillary) => {
        let method = "GET";
        let matchers = new Array();
        matchers.push(new autoguard.api.StaticRouteMatcher(decodeURIComponent("")));
        return {
            acceptsComponents: () => autoguard.api.acceptsComponents(raw.components, matchers),
            acceptsMethod: () => autoguard.api.acceptsMethod(raw.method, method),
            validateRequest: async () => {
                let options = {};
                options = { ...options, ...autoguard.api.decodeUndeclaredParameters(raw.parameters, Object.keys(options)) };
                let headers = {};
                headers["x-preferred-language"] = autoguard.api.decodeHeaderValue(raw.headers, "x-preferred-language", false);
                headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
                let payload = raw.payload;
                let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["readState"], serverOptions?.debugMode);
                let request = guard.as({ options, headers, payload }, "request");
                return {
                    handleRequest: async () => {
                        let response = await routes["readState"](new autoguard.api.ClientRequest(request, true, auxillary));
                        return {
                            validateResponse: async () => {
                                let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["readState"], serverOptions?.debugMode);
                                guard.as(response, "response");
                                let status = response.status ?? 200;
                                let headers = new Array();
                                headers.push(...autoguard.api.encodeHeaderPairs("x-wait-ms", [response.headers?.["x-wait-ms"]], false));
                                headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(response.headers ?? {}, headers.map((header) => header[0])));
                                let payload = autoguard.api.serializePayload(response.payload);
                                let defaultHeaders = serverOptions?.defaultHeaders?.slice() ?? [];
                                defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
                                return autoguard.api.finalizeResponse({ status, headers, payload }, defaultHeaders);
                            }
                        };
                    }
                };
            }
        };
    });
    endpoints.push((raw, auxillary) => {
        let method = "POST";
        let matchers = new Array();
        matchers.push(new autoguard.api.StaticRouteMatcher(decodeURIComponent("")));
        return {
            acceptsComponents: () => autoguard.api.acceptsComponents(raw.components, matchers),
            acceptsMethod: () => autoguard.api.acceptsMethod(raw.method, method),
            validateRequest: async () => {
                let options = {};
                options = { ...options, ...autoguard.api.decodeUndeclaredParameters(raw.parameters, Object.keys(options)) };
                let headers = {};
                headers["x-preferred-language"] = autoguard.api.decodeHeaderValue(raw.headers, "x-preferred-language", false);
                headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
                let payload = await autoguard.api.deserializePayload(raw.payload);
                let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["sendCommand"], serverOptions?.debugMode);
                let request = guard.as({ options, headers, payload }, "request");
                return {
                    handleRequest: async () => {
                        let response = await routes["sendCommand"](new autoguard.api.ClientRequest(request, false, auxillary));
                        return {
                            validateResponse: async () => {
                                let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["sendCommand"], serverOptions?.debugMode);
                                guard.as(response, "response");
                                let status = response.status ?? 200;
                                let headers = new Array();
                                headers.push(...autoguard.api.encodeHeaderPairs("x-wait-ms", [response.headers?.["x-wait-ms"]], false));
                                headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(response.headers ?? {}, headers.map((header) => header[0])));
                                let payload = autoguard.api.serializePayload(response.payload);
                                let defaultHeaders = serverOptions?.defaultHeaders?.slice() ?? [];
                                defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
                                return autoguard.api.finalizeResponse({ status, headers, payload }, defaultHeaders);
                            }
                        };
                    }
                };
            }
        };
    });
    return (request, response) => autoguard.api.route(endpoints, request, response, serverOptions);
};
exports.makeServer = makeServer;
