"use strict";
// This file was auto-generated by @joelek/autoguard. Edit at own risk.
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeClient = void 0;
const autoguard = require("@joelek/autoguard/dist/lib-client");
const shared = require("./index");
const makeClient = (clientOptions) => ({
    "readState": async (request, requestOptions) => {
        let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["readState"], clientOptions?.debugMode);
        guard.as(request, "request");
        let method = "GET";
        let components = new Array();
        components.push("");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
        let payload = request.payload ?? [];
        let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
        let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
        defaultHeaders.push(["Content-Type", "application/octet-stream"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
        {
            let status = raw.status;
            let headers = {};
            headers["x-wait-ms"] = autoguard.api.decodeHeaderValue(raw.headers, "x-wait-ms", false);
            headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
            let payload = await autoguard.api.deserializePayload(raw.payload);
            let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["readState"], clientOptions?.debugMode);
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    },
    "sendCommand": async (request, requestOptions) => {
        let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["sendCommand"], clientOptions?.debugMode);
        guard.as(request, "request");
        let method = "POST";
        let components = new Array();
        components.push("");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
        let payload = autoguard.api.serializePayload(request.payload);
        let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
        let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
        defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
        {
            let status = raw.status;
            let headers = {};
            headers["x-wait-ms"] = autoguard.api.decodeHeaderValue(raw.headers, "x-wait-ms", false);
            headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
            let payload = await autoguard.api.deserializePayload(raw.payload);
            let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["sendCommand"], clientOptions?.debugMode);
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    },
});
exports.makeClient = makeClient;
