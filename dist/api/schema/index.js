"use strict";
// This file was auto-generated by @joelek/autoguard. Edit at own risk.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Autoguard = exports.State = exports.WaitingForCommandState = exports.Command = exports.ResetStateCommand = exports.RecoverStates = exports.RecoveredState = exports.WaitingForRecoverPassphraseState = exports.WaitingForRecoverTokenState = exports.WaitingForRecoverEmailState = exports.WaitingForRecoverUsernameState = exports.RecoverCommands = exports.RecoverPassphraseCommand = exports.RecoverTokenCommand = exports.RecoverEmailCommand = exports.RecoverUsernameCommand = exports.RecoverCommand = exports.AuthenticateStates = exports.AuthenticatedState = exports.WaitingForAuthenticatePassphraseState = exports.WaitingForAuthenticateTokenState = exports.WaitingForAuthenticateEmailState = exports.WaitingForAuthenticateUsernameState = exports.AuthenticateCommands = exports.AuthenticatePassphraseCommand = exports.AuthenticateTokenCommand = exports.AuthenticateEmailCommand = exports.AuthenticateUsernameCommand = exports.AuthenticateCommand = exports.RegisterStates = exports.RegisteredState = exports.WaitingForRegisterPassphraseState = exports.WaitingForRegisterTokenState = exports.WaitingForRegisterEmailState = exports.WaitingForRegisterUsernameState = exports.RegisterCommands = exports.RegisterPassphraseCommand = exports.RegisterTokenCommand = exports.RegisterEmailCommand = exports.RegisterUsernameCommand = exports.RegisterCommand = void 0;
const autoguard = require("@joelek/autoguard/dist/lib-shared");
exports.RegisterCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("REGISTER")
}, {});
exports.RegisterUsernameCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("REGISTER_USERNAME"),
    "username": autoguard.guards.String
}, {});
exports.RegisterEmailCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("REGISTER_EMAIL"),
    "email": autoguard.guards.String
}, {});
exports.RegisterTokenCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("REGISTER_TOKEN"),
    "token": autoguard.guards.String
}, {});
exports.RegisterPassphraseCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("REGISTER_PASSPHRASE"),
    "passphrase": autoguard.guards.String
}, {});
exports.RegisterCommands = autoguard.guards.Union.of(autoguard.guards.Reference.of(() => exports.RegisterCommand), autoguard.guards.Reference.of(() => exports.RegisterUsernameCommand), autoguard.guards.Reference.of(() => exports.RegisterEmailCommand), autoguard.guards.Reference.of(() => exports.RegisterTokenCommand), autoguard.guards.Reference.of(() => exports.RegisterPassphraseCommand));
exports.WaitingForRegisterUsernameState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_REGISTER_USERNAME"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("REGISTER_USERNAME_REQUIRED"), autoguard.guards.StringLiteral.of("REGISTER_USERNAME_NOT_ACCEPTED"), autoguard.guards.StringLiteral.of("REGISTER_USERNAME_NOT_AVAILABLE"))
}, {});
exports.WaitingForRegisterEmailState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_REGISTER_EMAIL"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("REGISTER_EMAIL_REQUIRED"), autoguard.guards.StringLiteral.of("REGISTER_EMAIL_NOT_ACCEPTED"), autoguard.guards.StringLiteral.of("REGISTER_EMAIL_NOT_AVAILABLE"))
}, {});
exports.WaitingForRegisterTokenState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_REGISTER_TOKEN"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("REGISTER_TOKEN_REQUIRED"), autoguard.guards.StringLiteral.of("REGISTER_TOKEN_NOT_ACCEPTED"))
}, {});
exports.WaitingForRegisterPassphraseState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_REGISTER_PASSPHRASE"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("REGISTER_PASSPHRASE_REQUIRED"), autoguard.guards.StringLiteral.of("REGISTER_PASSPHRASE_NOT_ACCEPTED"))
}, {});
exports.RegisteredState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("REGISTERED"),
    "reason": autoguard.guards.StringLiteral.of("REGISTRATION_COMPLETED")
}, {});
exports.RegisterStates = autoguard.guards.Union.of(autoguard.guards.Reference.of(() => exports.WaitingForRegisterUsernameState), autoguard.guards.Reference.of(() => exports.WaitingForRegisterEmailState), autoguard.guards.Reference.of(() => exports.WaitingForRegisterTokenState), autoguard.guards.Reference.of(() => exports.WaitingForRegisterPassphraseState), autoguard.guards.Reference.of(() => exports.RegisteredState));
exports.AuthenticateCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("AUTHENTICATE")
}, {});
exports.AuthenticateUsernameCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("AUTHENTICATE_USERNAME"),
    "username": autoguard.guards.String
}, {});
exports.AuthenticateEmailCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("AUTHENTICATE_EMAIL"),
    "email": autoguard.guards.String
}, {});
exports.AuthenticateTokenCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("AUTHENTICATE_TOKEN"),
    "token": autoguard.guards.String
}, {});
exports.AuthenticatePassphraseCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("AUTHENTICATE_PASSPHRASE"),
    "passphrase": autoguard.guards.String
}, {});
exports.AuthenticateCommands = autoguard.guards.Union.of(autoguard.guards.Reference.of(() => exports.AuthenticateCommand), autoguard.guards.Reference.of(() => exports.AuthenticateUsernameCommand), autoguard.guards.Reference.of(() => exports.AuthenticateEmailCommand), autoguard.guards.Reference.of(() => exports.AuthenticateTokenCommand), autoguard.guards.Reference.of(() => exports.AuthenticatePassphraseCommand));
exports.WaitingForAuthenticateUsernameState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_AUTHENTICATE_USERNAME"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("AUTHENTICATE_USERNAME_REQUIRED"), autoguard.guards.StringLiteral.of("AUTHENTICATE_USERNAME_NOT_ACCEPTED"), autoguard.guards.StringLiteral.of("AUTHENTICATE_USERNAME_NOT_AVAILABLE"))
}, {});
exports.WaitingForAuthenticateEmailState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_AUTHENTICATE_EMAIL"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("AUTHENTICATE_EMAIL_REQUIRED"), autoguard.guards.StringLiteral.of("AUTHENTICATE_EMAIL_NOT_ACCEPTED"), autoguard.guards.StringLiteral.of("AUTHENTICATE_EMAIL_NOT_AVAILABLE"))
}, {});
exports.WaitingForAuthenticateTokenState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_AUTHENTICATE_TOKEN"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("AUTHENTICATE_TOKEN_REQUIRED"), autoguard.guards.StringLiteral.of("AUTHENTICATE_TOKEN_NOT_ACCEPTED"))
}, {});
exports.WaitingForAuthenticatePassphraseState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_AUTHENTICATE_PASSPHRASE"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("AUTHENTICATE_PASSPHRASE_REQUIRED"), autoguard.guards.StringLiteral.of("AUTHENTICATE_PASSPHRASE_NOT_ACCEPTED"))
}, {});
exports.AuthenticatedState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("AUTHENTICATED"),
    "reason": autoguard.guards.StringLiteral.of("AUTHENTICATION_COMPLETED")
}, {});
exports.AuthenticateStates = autoguard.guards.Union.of(autoguard.guards.Reference.of(() => exports.WaitingForAuthenticateUsernameState), autoguard.guards.Reference.of(() => exports.WaitingForAuthenticateEmailState), autoguard.guards.Reference.of(() => exports.WaitingForAuthenticateTokenState), autoguard.guards.Reference.of(() => exports.WaitingForAuthenticatePassphraseState), autoguard.guards.Reference.of(() => exports.AuthenticatedState));
exports.RecoverCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("RECOVER")
}, {});
exports.RecoverUsernameCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("RECOVER_USERNAME"),
    "username": autoguard.guards.String
}, {});
exports.RecoverEmailCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("RECOVER_EMAIL"),
    "email": autoguard.guards.String
}, {});
exports.RecoverTokenCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("RECOVER_TOKEN"),
    "token": autoguard.guards.String
}, {});
exports.RecoverPassphraseCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("RECOVER_PASSPHRASE"),
    "passphrase": autoguard.guards.String
}, {});
exports.RecoverCommands = autoguard.guards.Union.of(autoguard.guards.Reference.of(() => exports.RecoverCommand), autoguard.guards.Reference.of(() => exports.RecoverUsernameCommand), autoguard.guards.Reference.of(() => exports.RecoverEmailCommand), autoguard.guards.Reference.of(() => exports.RecoverTokenCommand), autoguard.guards.Reference.of(() => exports.RecoverPassphraseCommand));
exports.WaitingForRecoverUsernameState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_RECOVER_USERNAME"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("RECOVER_USERNAME_REQUIRED"), autoguard.guards.StringLiteral.of("RECOVER_USERNAME_NOT_ACCEPTED"), autoguard.guards.StringLiteral.of("RECOVER_USERNAME_NOT_AVAILABLE"))
}, {});
exports.WaitingForRecoverEmailState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_RECOVER_EMAIL"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("RECOVER_EMAIL_REQUIRED"), autoguard.guards.StringLiteral.of("RECOVER_EMAIL_NOT_ACCEPTED"), autoguard.guards.StringLiteral.of("RECOVER_EMAIL_NOT_AVAILABLE"))
}, {});
exports.WaitingForRecoverTokenState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_RECOVER_TOKEN"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("RECOVER_TOKEN_REQUIRED"), autoguard.guards.StringLiteral.of("RECOVER_TOKEN_NOT_ACCEPTED"))
}, {});
exports.WaitingForRecoverPassphraseState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_RECOVER_PASSPHRASE"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("RECOVER_PASSPHRASE_REQUIRED"), autoguard.guards.StringLiteral.of("RECOVER_PASSPHRASE_NOT_ACCEPTED"))
}, {});
exports.RecoveredState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("RECOVERED"),
    "reason": autoguard.guards.StringLiteral.of("RECOVERY_COMPLETED")
}, {});
exports.RecoverStates = autoguard.guards.Union.of(autoguard.guards.Reference.of(() => exports.WaitingForRecoverUsernameState), autoguard.guards.Reference.of(() => exports.WaitingForRecoverEmailState), autoguard.guards.Reference.of(() => exports.WaitingForRecoverTokenState), autoguard.guards.Reference.of(() => exports.WaitingForRecoverPassphraseState), autoguard.guards.Reference.of(() => exports.RecoveredState));
exports.ResetStateCommand = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("RESET_STATE")
}, {});
exports.Command = autoguard.guards.Union.of(autoguard.guards.Reference.of(() => exports.ResetStateCommand), autoguard.guards.Reference.of(() => exports.RegisterCommands), autoguard.guards.Reference.of(() => exports.AuthenticateCommands), autoguard.guards.Reference.of(() => exports.RecoverCommands));
exports.WaitingForCommandState = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("WAITING_FOR_COMMAND"),
    "reason": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("COMMAND_REQUIRED"), autoguard.guards.StringLiteral.of("SESSION_EXPIRED"), autoguard.guards.StringLiteral.of("INVALID_COMMAND"))
}, {});
exports.State = autoguard.guards.Union.of(autoguard.guards.Reference.of(() => exports.WaitingForCommandState), autoguard.guards.Reference.of(() => exports.RegisterStates), autoguard.guards.Reference.of(() => exports.AuthenticateStates), autoguard.guards.Reference.of(() => exports.RecoverStates));
var Autoguard;
(function (Autoguard) {
    Autoguard.Guards = {
        "RegisterCommand": autoguard.guards.Reference.of(() => exports.RegisterCommand),
        "RegisterUsernameCommand": autoguard.guards.Reference.of(() => exports.RegisterUsernameCommand),
        "RegisterEmailCommand": autoguard.guards.Reference.of(() => exports.RegisterEmailCommand),
        "RegisterTokenCommand": autoguard.guards.Reference.of(() => exports.RegisterTokenCommand),
        "RegisterPassphraseCommand": autoguard.guards.Reference.of(() => exports.RegisterPassphraseCommand),
        "RegisterCommands": autoguard.guards.Reference.of(() => exports.RegisterCommands),
        "WaitingForRegisterUsernameState": autoguard.guards.Reference.of(() => exports.WaitingForRegisterUsernameState),
        "WaitingForRegisterEmailState": autoguard.guards.Reference.of(() => exports.WaitingForRegisterEmailState),
        "WaitingForRegisterTokenState": autoguard.guards.Reference.of(() => exports.WaitingForRegisterTokenState),
        "WaitingForRegisterPassphraseState": autoguard.guards.Reference.of(() => exports.WaitingForRegisterPassphraseState),
        "RegisteredState": autoguard.guards.Reference.of(() => exports.RegisteredState),
        "RegisterStates": autoguard.guards.Reference.of(() => exports.RegisterStates),
        "AuthenticateCommand": autoguard.guards.Reference.of(() => exports.AuthenticateCommand),
        "AuthenticateUsernameCommand": autoguard.guards.Reference.of(() => exports.AuthenticateUsernameCommand),
        "AuthenticateEmailCommand": autoguard.guards.Reference.of(() => exports.AuthenticateEmailCommand),
        "AuthenticateTokenCommand": autoguard.guards.Reference.of(() => exports.AuthenticateTokenCommand),
        "AuthenticatePassphraseCommand": autoguard.guards.Reference.of(() => exports.AuthenticatePassphraseCommand),
        "AuthenticateCommands": autoguard.guards.Reference.of(() => exports.AuthenticateCommands),
        "WaitingForAuthenticateUsernameState": autoguard.guards.Reference.of(() => exports.WaitingForAuthenticateUsernameState),
        "WaitingForAuthenticateEmailState": autoguard.guards.Reference.of(() => exports.WaitingForAuthenticateEmailState),
        "WaitingForAuthenticateTokenState": autoguard.guards.Reference.of(() => exports.WaitingForAuthenticateTokenState),
        "WaitingForAuthenticatePassphraseState": autoguard.guards.Reference.of(() => exports.WaitingForAuthenticatePassphraseState),
        "AuthenticatedState": autoguard.guards.Reference.of(() => exports.AuthenticatedState),
        "AuthenticateStates": autoguard.guards.Reference.of(() => exports.AuthenticateStates),
        "RecoverCommand": autoguard.guards.Reference.of(() => exports.RecoverCommand),
        "RecoverUsernameCommand": autoguard.guards.Reference.of(() => exports.RecoverUsernameCommand),
        "RecoverEmailCommand": autoguard.guards.Reference.of(() => exports.RecoverEmailCommand),
        "RecoverTokenCommand": autoguard.guards.Reference.of(() => exports.RecoverTokenCommand),
        "RecoverPassphraseCommand": autoguard.guards.Reference.of(() => exports.RecoverPassphraseCommand),
        "RecoverCommands": autoguard.guards.Reference.of(() => exports.RecoverCommands),
        "WaitingForRecoverUsernameState": autoguard.guards.Reference.of(() => exports.WaitingForRecoverUsernameState),
        "WaitingForRecoverEmailState": autoguard.guards.Reference.of(() => exports.WaitingForRecoverEmailState),
        "WaitingForRecoverTokenState": autoguard.guards.Reference.of(() => exports.WaitingForRecoverTokenState),
        "WaitingForRecoverPassphraseState": autoguard.guards.Reference.of(() => exports.WaitingForRecoverPassphraseState),
        "RecoveredState": autoguard.guards.Reference.of(() => exports.RecoveredState),
        "RecoverStates": autoguard.guards.Reference.of(() => exports.RecoverStates),
        "ResetStateCommand": autoguard.guards.Reference.of(() => exports.ResetStateCommand),
        "Command": autoguard.guards.Reference.of(() => exports.Command),
        "WaitingForCommandState": autoguard.guards.Reference.of(() => exports.WaitingForCommandState),
        "State": autoguard.guards.Reference.of(() => exports.State)
    };
    Autoguard.Requests = {
        "readState": autoguard.guards.Object.of({}, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {}), autoguard.api.Options),
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {}), autoguard.api.Headers),
            "payload": autoguard.api.Binary
        }),
        "sendCommand": autoguard.guards.Object.of({
            "payload": autoguard.guards.Object.of({
                "command": autoguard.guards.Reference.of(() => exports.Command)
            }, {})
        }, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {}), autoguard.api.Options),
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {}), autoguard.api.Headers)
        })
    };
    Autoguard.Responses = {
        "readState": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "x-wait-ms": autoguard.guards.Integer
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Object.of({
                "state": autoguard.guards.Reference.of(() => exports.State)
            }, {})
        }, {
            "status": autoguard.guards.Integer
        }),
        "sendCommand": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "x-wait-ms": autoguard.guards.Integer
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Object.of({
                "state": autoguard.guards.Reference.of(() => exports.State)
            }, {})
        }, {
            "status": autoguard.guards.Integer
        })
    };
})(Autoguard = exports.Autoguard || (exports.Autoguard = {}));
;
