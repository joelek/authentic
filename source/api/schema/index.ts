// This file was auto-generated by @joelek/autoguard. Edit at own risk.

import * as autoguard from "@joelek/autoguard/dist/lib-shared";

export const RegisterCommand: autoguard.serialization.MessageGuard<RegisterCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("REGISTER")
}, {});

export type RegisterCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"REGISTER">
}, {}>;

export const RegisterUsernameCommand: autoguard.serialization.MessageGuard<RegisterUsernameCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("REGISTER_USERNAME"),
	"username": autoguard.guards.String
}, {});

export type RegisterUsernameCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"REGISTER_USERNAME">,
	"username": autoguard.guards.String
}, {}>;

export const RegisterEmailCommand: autoguard.serialization.MessageGuard<RegisterEmailCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("REGISTER_EMAIL"),
	"email": autoguard.guards.String
}, {});

export type RegisterEmailCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"REGISTER_EMAIL">,
	"email": autoguard.guards.String
}, {}>;

export const RegisterTokenCommand: autoguard.serialization.MessageGuard<RegisterTokenCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("REGISTER_TOKEN"),
	"token": autoguard.guards.String
}, {});

export type RegisterTokenCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"REGISTER_TOKEN">,
	"token": autoguard.guards.String
}, {}>;

export const RegisterPassphraseCommand: autoguard.serialization.MessageGuard<RegisterPassphraseCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("REGISTER_PASSPHRASE"),
	"passphrase": autoguard.guards.String
}, {});

export type RegisterPassphraseCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"REGISTER_PASSPHRASE">,
	"passphrase": autoguard.guards.String
}, {}>;

export const RegisterCommands: autoguard.serialization.MessageGuard<RegisterCommands> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => RegisterCommand),
	autoguard.guards.Reference.of(() => RegisterUsernameCommand),
	autoguard.guards.Reference.of(() => RegisterEmailCommand),
	autoguard.guards.Reference.of(() => RegisterTokenCommand),
	autoguard.guards.Reference.of(() => RegisterPassphraseCommand)
);

export type RegisterCommands = autoguard.guards.Union<[
	autoguard.guards.Reference<RegisterCommand>,
	autoguard.guards.Reference<RegisterUsernameCommand>,
	autoguard.guards.Reference<RegisterEmailCommand>,
	autoguard.guards.Reference<RegisterTokenCommand>,
	autoguard.guards.Reference<RegisterPassphraseCommand>
]>;

export const WaitingForRegisterUsernameState: autoguard.serialization.MessageGuard<WaitingForRegisterUsernameState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_REGISTER_USERNAME"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("REGISTER_USERNAME_REQUIRED"),
		autoguard.guards.StringLiteral.of("REGISTER_USERNAME_NOT_ACCEPTED"),
		autoguard.guards.StringLiteral.of("REGISTER_USERNAME_NOT_AVAILABLE")
	)
}, {});

export type WaitingForRegisterUsernameState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_REGISTER_USERNAME">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"REGISTER_USERNAME_REQUIRED">,
		autoguard.guards.StringLiteral<"REGISTER_USERNAME_NOT_ACCEPTED">,
		autoguard.guards.StringLiteral<"REGISTER_USERNAME_NOT_AVAILABLE">
	]>
}, {}>;

export const WaitingForRegisterEmailState: autoguard.serialization.MessageGuard<WaitingForRegisterEmailState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_REGISTER_EMAIL"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("REGISTER_EMAIL_REQUIRED"),
		autoguard.guards.StringLiteral.of("REGISTER_EMAIL_NOT_ACCEPTED"),
		autoguard.guards.StringLiteral.of("REGISTER_EMAIL_NOT_AVAILABLE")
	)
}, {});

export type WaitingForRegisterEmailState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_REGISTER_EMAIL">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"REGISTER_EMAIL_REQUIRED">,
		autoguard.guards.StringLiteral<"REGISTER_EMAIL_NOT_ACCEPTED">,
		autoguard.guards.StringLiteral<"REGISTER_EMAIL_NOT_AVAILABLE">
	]>
}, {}>;

export const WaitingForRegisterTokenState: autoguard.serialization.MessageGuard<WaitingForRegisterTokenState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_REGISTER_TOKEN"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("REGISTER_TOKEN_REQUIRED"),
		autoguard.guards.StringLiteral.of("REGISTER_TOKEN_NOT_ACCEPTED")
	)
}, {});

export type WaitingForRegisterTokenState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_REGISTER_TOKEN">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"REGISTER_TOKEN_REQUIRED">,
		autoguard.guards.StringLiteral<"REGISTER_TOKEN_NOT_ACCEPTED">
	]>
}, {}>;

export const WaitingForRegisterPassphraseState: autoguard.serialization.MessageGuard<WaitingForRegisterPassphraseState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_REGISTER_PASSPHRASE"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("REGISTER_PASSPHRASE_REQUIRED"),
		autoguard.guards.StringLiteral.of("REGISTER_PASSPHRASE_NOT_ACCEPTED")
	)
}, {});

export type WaitingForRegisterPassphraseState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_REGISTER_PASSPHRASE">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"REGISTER_PASSPHRASE_REQUIRED">,
		autoguard.guards.StringLiteral<"REGISTER_PASSPHRASE_NOT_ACCEPTED">
	]>
}, {}>;

export const RegisteredState: autoguard.serialization.MessageGuard<RegisteredState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("REGISTERED"),
	"reason": autoguard.guards.StringLiteral.of("REGISTRATION_COMPLETED")
}, {});

export type RegisteredState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"REGISTERED">,
	"reason": autoguard.guards.StringLiteral<"REGISTRATION_COMPLETED">
}, {}>;

export const RegisterStates: autoguard.serialization.MessageGuard<RegisterStates> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => WaitingForRegisterUsernameState),
	autoguard.guards.Reference.of(() => WaitingForRegisterEmailState),
	autoguard.guards.Reference.of(() => WaitingForRegisterTokenState),
	autoguard.guards.Reference.of(() => WaitingForRegisterPassphraseState),
	autoguard.guards.Reference.of(() => RegisteredState)
);

export type RegisterStates = autoguard.guards.Union<[
	autoguard.guards.Reference<WaitingForRegisterUsernameState>,
	autoguard.guards.Reference<WaitingForRegisterEmailState>,
	autoguard.guards.Reference<WaitingForRegisterTokenState>,
	autoguard.guards.Reference<WaitingForRegisterPassphraseState>,
	autoguard.guards.Reference<RegisteredState>
]>;

export const AuthenticateCommand: autoguard.serialization.MessageGuard<AuthenticateCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("AUTHENTICATE")
}, {});

export type AuthenticateCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"AUTHENTICATE">
}, {}>;

export const AuthenticateUsernameCommand: autoguard.serialization.MessageGuard<AuthenticateUsernameCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("AUTHENTICATE_USERNAME"),
	"username": autoguard.guards.String
}, {});

export type AuthenticateUsernameCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"AUTHENTICATE_USERNAME">,
	"username": autoguard.guards.String
}, {}>;

export const AuthenticateEmailCommand: autoguard.serialization.MessageGuard<AuthenticateEmailCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("AUTHENTICATE_EMAIL"),
	"email": autoguard.guards.String
}, {});

export type AuthenticateEmailCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"AUTHENTICATE_EMAIL">,
	"email": autoguard.guards.String
}, {}>;

export const AuthenticateTokenCommand: autoguard.serialization.MessageGuard<AuthenticateTokenCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("AUTHENTICATE_TOKEN"),
	"token": autoguard.guards.String
}, {});

export type AuthenticateTokenCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"AUTHENTICATE_TOKEN">,
	"token": autoguard.guards.String
}, {}>;

export const AuthenticatePassphraseCommand: autoguard.serialization.MessageGuard<AuthenticatePassphraseCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("AUTHENTICATE_PASSPHRASE"),
	"passphrase": autoguard.guards.String
}, {});

export type AuthenticatePassphraseCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"AUTHENTICATE_PASSPHRASE">,
	"passphrase": autoguard.guards.String
}, {}>;

export const AuthenticateCommands: autoguard.serialization.MessageGuard<AuthenticateCommands> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => AuthenticateCommand),
	autoguard.guards.Reference.of(() => AuthenticateUsernameCommand),
	autoguard.guards.Reference.of(() => AuthenticateEmailCommand),
	autoguard.guards.Reference.of(() => AuthenticateTokenCommand),
	autoguard.guards.Reference.of(() => AuthenticatePassphraseCommand)
);

export type AuthenticateCommands = autoguard.guards.Union<[
	autoguard.guards.Reference<AuthenticateCommand>,
	autoguard.guards.Reference<AuthenticateUsernameCommand>,
	autoguard.guards.Reference<AuthenticateEmailCommand>,
	autoguard.guards.Reference<AuthenticateTokenCommand>,
	autoguard.guards.Reference<AuthenticatePassphraseCommand>
]>;

export const WaitingForAuthenticateUsernameState: autoguard.serialization.MessageGuard<WaitingForAuthenticateUsernameState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_AUTHENTICATE_USERNAME"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("AUTHENTICATE_USERNAME_REQUIRED"),
		autoguard.guards.StringLiteral.of("AUTHENTICATE_USERNAME_NOT_ACCEPTED"),
		autoguard.guards.StringLiteral.of("AUTHENTICATE_USERNAME_NOT_AVAILABLE")
	)
}, {});

export type WaitingForAuthenticateUsernameState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_AUTHENTICATE_USERNAME">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"AUTHENTICATE_USERNAME_REQUIRED">,
		autoguard.guards.StringLiteral<"AUTHENTICATE_USERNAME_NOT_ACCEPTED">,
		autoguard.guards.StringLiteral<"AUTHENTICATE_USERNAME_NOT_AVAILABLE">
	]>
}, {}>;

export const WaitingForAuthenticateEmailState: autoguard.serialization.MessageGuard<WaitingForAuthenticateEmailState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_AUTHENTICATE_EMAIL"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("AUTHENTICATE_EMAIL_REQUIRED"),
		autoguard.guards.StringLiteral.of("AUTHENTICATE_EMAIL_NOT_ACCEPTED"),
		autoguard.guards.StringLiteral.of("AUTHENTICATE_EMAIL_NOT_AVAILABLE")
	)
}, {});

export type WaitingForAuthenticateEmailState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_AUTHENTICATE_EMAIL">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"AUTHENTICATE_EMAIL_REQUIRED">,
		autoguard.guards.StringLiteral<"AUTHENTICATE_EMAIL_NOT_ACCEPTED">,
		autoguard.guards.StringLiteral<"AUTHENTICATE_EMAIL_NOT_AVAILABLE">
	]>
}, {}>;

export const WaitingForAuthenticateTokenState: autoguard.serialization.MessageGuard<WaitingForAuthenticateTokenState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_AUTHENTICATE_TOKEN"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("AUTHENTICATE_TOKEN_REQUIRED"),
		autoguard.guards.StringLiteral.of("AUTHENTICATE_TOKEN_NOT_ACCEPTED")
	)
}, {});

export type WaitingForAuthenticateTokenState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_AUTHENTICATE_TOKEN">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"AUTHENTICATE_TOKEN_REQUIRED">,
		autoguard.guards.StringLiteral<"AUTHENTICATE_TOKEN_NOT_ACCEPTED">
	]>
}, {}>;

export const WaitingForAuthenticatePassphraseState: autoguard.serialization.MessageGuard<WaitingForAuthenticatePassphraseState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_AUTHENTICATE_PASSPHRASE"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("AUTHENTICATE_PASSPHRASE_REQUIRED"),
		autoguard.guards.StringLiteral.of("AUTHENTICATE_PASSPHRASE_NOT_ACCEPTED")
	)
}, {});

export type WaitingForAuthenticatePassphraseState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_AUTHENTICATE_PASSPHRASE">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"AUTHENTICATE_PASSPHRASE_REQUIRED">,
		autoguard.guards.StringLiteral<"AUTHENTICATE_PASSPHRASE_NOT_ACCEPTED">
	]>
}, {}>;

export const AuthenticatedState: autoguard.serialization.MessageGuard<AuthenticatedState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("AUTHENTICATED"),
	"reason": autoguard.guards.StringLiteral.of("AUTHENTICATION_COMPLETED")
}, {});

export type AuthenticatedState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"AUTHENTICATED">,
	"reason": autoguard.guards.StringLiteral<"AUTHENTICATION_COMPLETED">
}, {}>;

export const AuthenticateStates: autoguard.serialization.MessageGuard<AuthenticateStates> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => WaitingForAuthenticateUsernameState),
	autoguard.guards.Reference.of(() => WaitingForAuthenticateEmailState),
	autoguard.guards.Reference.of(() => WaitingForAuthenticateTokenState),
	autoguard.guards.Reference.of(() => WaitingForAuthenticatePassphraseState),
	autoguard.guards.Reference.of(() => AuthenticatedState)
);

export type AuthenticateStates = autoguard.guards.Union<[
	autoguard.guards.Reference<WaitingForAuthenticateUsernameState>,
	autoguard.guards.Reference<WaitingForAuthenticateEmailState>,
	autoguard.guards.Reference<WaitingForAuthenticateTokenState>,
	autoguard.guards.Reference<WaitingForAuthenticatePassphraseState>,
	autoguard.guards.Reference<AuthenticatedState>
]>;

export const RecoverCommand: autoguard.serialization.MessageGuard<RecoverCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("RECOVER")
}, {});

export type RecoverCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"RECOVER">
}, {}>;

export const RecoverUsernameCommand: autoguard.serialization.MessageGuard<RecoverUsernameCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("RECOVER_USERNAME"),
	"username": autoguard.guards.String
}, {});

export type RecoverUsernameCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"RECOVER_USERNAME">,
	"username": autoguard.guards.String
}, {}>;

export const RecoverEmailCommand: autoguard.serialization.MessageGuard<RecoverEmailCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("RECOVER_EMAIL"),
	"email": autoguard.guards.String
}, {});

export type RecoverEmailCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"RECOVER_EMAIL">,
	"email": autoguard.guards.String
}, {}>;

export const RecoverTokenCommand: autoguard.serialization.MessageGuard<RecoverTokenCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("RECOVER_TOKEN"),
	"token": autoguard.guards.String
}, {});

export type RecoverTokenCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"RECOVER_TOKEN">,
	"token": autoguard.guards.String
}, {}>;

export const RecoverPassphraseCommand: autoguard.serialization.MessageGuard<RecoverPassphraseCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("RECOVER_PASSPHRASE"),
	"passphrase": autoguard.guards.String
}, {});

export type RecoverPassphraseCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"RECOVER_PASSPHRASE">,
	"passphrase": autoguard.guards.String
}, {}>;

export const RecoverCommands: autoguard.serialization.MessageGuard<RecoverCommands> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => RecoverCommand),
	autoguard.guards.Reference.of(() => RecoverUsernameCommand),
	autoguard.guards.Reference.of(() => RecoverEmailCommand),
	autoguard.guards.Reference.of(() => RecoverTokenCommand),
	autoguard.guards.Reference.of(() => RecoverPassphraseCommand)
);

export type RecoverCommands = autoguard.guards.Union<[
	autoguard.guards.Reference<RecoverCommand>,
	autoguard.guards.Reference<RecoverUsernameCommand>,
	autoguard.guards.Reference<RecoverEmailCommand>,
	autoguard.guards.Reference<RecoverTokenCommand>,
	autoguard.guards.Reference<RecoverPassphraseCommand>
]>;

export const WaitingForRecoverUsernameState: autoguard.serialization.MessageGuard<WaitingForRecoverUsernameState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_RECOVER_USERNAME"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("RECOVER_USERNAME_REQUIRED"),
		autoguard.guards.StringLiteral.of("RECOVER_USERNAME_NOT_ACCEPTED"),
		autoguard.guards.StringLiteral.of("RECOVER_USERNAME_NOT_AVAILABLE")
	)
}, {});

export type WaitingForRecoverUsernameState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_RECOVER_USERNAME">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"RECOVER_USERNAME_REQUIRED">,
		autoguard.guards.StringLiteral<"RECOVER_USERNAME_NOT_ACCEPTED">,
		autoguard.guards.StringLiteral<"RECOVER_USERNAME_NOT_AVAILABLE">
	]>
}, {}>;

export const WaitingForRecoverEmailState: autoguard.serialization.MessageGuard<WaitingForRecoverEmailState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_RECOVER_EMAIL"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("RECOVER_EMAIL_REQUIRED"),
		autoguard.guards.StringLiteral.of("RECOVER_EMAIL_NOT_ACCEPTED"),
		autoguard.guards.StringLiteral.of("RECOVER_EMAIL_NOT_AVAILABLE")
	)
}, {});

export type WaitingForRecoverEmailState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_RECOVER_EMAIL">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"RECOVER_EMAIL_REQUIRED">,
		autoguard.guards.StringLiteral<"RECOVER_EMAIL_NOT_ACCEPTED">,
		autoguard.guards.StringLiteral<"RECOVER_EMAIL_NOT_AVAILABLE">
	]>
}, {}>;

export const WaitingForRecoverTokenState: autoguard.serialization.MessageGuard<WaitingForRecoverTokenState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_RECOVER_TOKEN"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("RECOVER_TOKEN_REQUIRED"),
		autoguard.guards.StringLiteral.of("RECOVER_TOKEN_NOT_ACCEPTED")
	)
}, {});

export type WaitingForRecoverTokenState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_RECOVER_TOKEN">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"RECOVER_TOKEN_REQUIRED">,
		autoguard.guards.StringLiteral<"RECOVER_TOKEN_NOT_ACCEPTED">
	]>
}, {}>;

export const WaitingForRecoverPassphraseState: autoguard.serialization.MessageGuard<WaitingForRecoverPassphraseState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_RECOVER_PASSPHRASE"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("RECOVER_PASSPHRASE_REQUIRED"),
		autoguard.guards.StringLiteral.of("RECOVER_PASSPHRASE_NOT_ACCEPTED")
	)
}, {});

export type WaitingForRecoverPassphraseState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_RECOVER_PASSPHRASE">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"RECOVER_PASSPHRASE_REQUIRED">,
		autoguard.guards.StringLiteral<"RECOVER_PASSPHRASE_NOT_ACCEPTED">
	]>
}, {}>;

export const RecoveredState: autoguard.serialization.MessageGuard<RecoveredState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("RECOVERED"),
	"reason": autoguard.guards.StringLiteral.of("RECOVERY_COMPLETED")
}, {});

export type RecoveredState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"RECOVERED">,
	"reason": autoguard.guards.StringLiteral<"RECOVERY_COMPLETED">
}, {}>;

export const RecoverStates: autoguard.serialization.MessageGuard<RecoverStates> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => WaitingForRecoverUsernameState),
	autoguard.guards.Reference.of(() => WaitingForRecoverEmailState),
	autoguard.guards.Reference.of(() => WaitingForRecoverTokenState),
	autoguard.guards.Reference.of(() => WaitingForRecoverPassphraseState),
	autoguard.guards.Reference.of(() => RecoveredState)
);

export type RecoverStates = autoguard.guards.Union<[
	autoguard.guards.Reference<WaitingForRecoverUsernameState>,
	autoguard.guards.Reference<WaitingForRecoverEmailState>,
	autoguard.guards.Reference<WaitingForRecoverTokenState>,
	autoguard.guards.Reference<WaitingForRecoverPassphraseState>,
	autoguard.guards.Reference<RecoveredState>
]>;

export const ResetStateCommand: autoguard.serialization.MessageGuard<ResetStateCommand> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("RESET_STATE")
}, {});

export type ResetStateCommand = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"RESET_STATE">
}, {}>;

export const Command: autoguard.serialization.MessageGuard<Command> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => ResetStateCommand),
	autoguard.guards.Reference.of(() => RegisterCommands),
	autoguard.guards.Reference.of(() => AuthenticateCommands),
	autoguard.guards.Reference.of(() => RecoverCommands)
);

export type Command = autoguard.guards.Union<[
	autoguard.guards.Reference<ResetStateCommand>,
	autoguard.guards.Reference<RegisterCommands>,
	autoguard.guards.Reference<AuthenticateCommands>,
	autoguard.guards.Reference<RecoverCommands>
]>;

export const WaitingForCommandState: autoguard.serialization.MessageGuard<WaitingForCommandState> = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("WAITING_FOR_COMMAND"),
	"reason": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("COMMAND_REQUIRED"),
		autoguard.guards.StringLiteral.of("SESSION_EXPIRED"),
		autoguard.guards.StringLiteral.of("INVALID_COMMAND")
	)
}, {});

export type WaitingForCommandState = autoguard.guards.Object<{
	"type": autoguard.guards.StringLiteral<"WAITING_FOR_COMMAND">,
	"reason": autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"COMMAND_REQUIRED">,
		autoguard.guards.StringLiteral<"SESSION_EXPIRED">,
		autoguard.guards.StringLiteral<"INVALID_COMMAND">
	]>
}, {}>;

export const State: autoguard.serialization.MessageGuard<State> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => WaitingForCommandState),
	autoguard.guards.Reference.of(() => RegisterStates),
	autoguard.guards.Reference.of(() => AuthenticateStates),
	autoguard.guards.Reference.of(() => RecoverStates)
);

export type State = autoguard.guards.Union<[
	autoguard.guards.Reference<WaitingForCommandState>,
	autoguard.guards.Reference<RegisterStates>,
	autoguard.guards.Reference<AuthenticateStates>,
	autoguard.guards.Reference<RecoverStates>
]>;

export namespace Autoguard {
	export const Guards = {
		"RegisterCommand": autoguard.guards.Reference.of(() => RegisterCommand),
		"RegisterUsernameCommand": autoguard.guards.Reference.of(() => RegisterUsernameCommand),
		"RegisterEmailCommand": autoguard.guards.Reference.of(() => RegisterEmailCommand),
		"RegisterTokenCommand": autoguard.guards.Reference.of(() => RegisterTokenCommand),
		"RegisterPassphraseCommand": autoguard.guards.Reference.of(() => RegisterPassphraseCommand),
		"RegisterCommands": autoguard.guards.Reference.of(() => RegisterCommands),
		"WaitingForRegisterUsernameState": autoguard.guards.Reference.of(() => WaitingForRegisterUsernameState),
		"WaitingForRegisterEmailState": autoguard.guards.Reference.of(() => WaitingForRegisterEmailState),
		"WaitingForRegisterTokenState": autoguard.guards.Reference.of(() => WaitingForRegisterTokenState),
		"WaitingForRegisterPassphraseState": autoguard.guards.Reference.of(() => WaitingForRegisterPassphraseState),
		"RegisteredState": autoguard.guards.Reference.of(() => RegisteredState),
		"RegisterStates": autoguard.guards.Reference.of(() => RegisterStates),
		"AuthenticateCommand": autoguard.guards.Reference.of(() => AuthenticateCommand),
		"AuthenticateUsernameCommand": autoguard.guards.Reference.of(() => AuthenticateUsernameCommand),
		"AuthenticateEmailCommand": autoguard.guards.Reference.of(() => AuthenticateEmailCommand),
		"AuthenticateTokenCommand": autoguard.guards.Reference.of(() => AuthenticateTokenCommand),
		"AuthenticatePassphraseCommand": autoguard.guards.Reference.of(() => AuthenticatePassphraseCommand),
		"AuthenticateCommands": autoguard.guards.Reference.of(() => AuthenticateCommands),
		"WaitingForAuthenticateUsernameState": autoguard.guards.Reference.of(() => WaitingForAuthenticateUsernameState),
		"WaitingForAuthenticateEmailState": autoguard.guards.Reference.of(() => WaitingForAuthenticateEmailState),
		"WaitingForAuthenticateTokenState": autoguard.guards.Reference.of(() => WaitingForAuthenticateTokenState),
		"WaitingForAuthenticatePassphraseState": autoguard.guards.Reference.of(() => WaitingForAuthenticatePassphraseState),
		"AuthenticatedState": autoguard.guards.Reference.of(() => AuthenticatedState),
		"AuthenticateStates": autoguard.guards.Reference.of(() => AuthenticateStates),
		"RecoverCommand": autoguard.guards.Reference.of(() => RecoverCommand),
		"RecoverUsernameCommand": autoguard.guards.Reference.of(() => RecoverUsernameCommand),
		"RecoverEmailCommand": autoguard.guards.Reference.of(() => RecoverEmailCommand),
		"RecoverTokenCommand": autoguard.guards.Reference.of(() => RecoverTokenCommand),
		"RecoverPassphraseCommand": autoguard.guards.Reference.of(() => RecoverPassphraseCommand),
		"RecoverCommands": autoguard.guards.Reference.of(() => RecoverCommands),
		"WaitingForRecoverUsernameState": autoguard.guards.Reference.of(() => WaitingForRecoverUsernameState),
		"WaitingForRecoverEmailState": autoguard.guards.Reference.of(() => WaitingForRecoverEmailState),
		"WaitingForRecoverTokenState": autoguard.guards.Reference.of(() => WaitingForRecoverTokenState),
		"WaitingForRecoverPassphraseState": autoguard.guards.Reference.of(() => WaitingForRecoverPassphraseState),
		"RecoveredState": autoguard.guards.Reference.of(() => RecoveredState),
		"RecoverStates": autoguard.guards.Reference.of(() => RecoverStates),
		"ResetStateCommand": autoguard.guards.Reference.of(() => ResetStateCommand),
		"Command": autoguard.guards.Reference.of(() => Command),
		"WaitingForCommandState": autoguard.guards.Reference.of(() => WaitingForCommandState),
		"State": autoguard.guards.Reference.of(() => State)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {
		"readState": autoguard.guards.Object.of({}, {
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			),
			"payload": autoguard.api.Binary
		}),
		"sendCommand": autoguard.guards.Object.of({
			"payload": autoguard.guards.Object.of({
				"command": autoguard.guards.Reference.of(() => Command)
			}, {})
		}, {
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			)
		})
	};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {
		"readState": autoguard.guards.Object.of({
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({
					"x-wait-ms": autoguard.guards.Integer
				}, {}),
				autoguard.api.Headers
			),
			"payload": autoguard.guards.Object.of({
				"state": autoguard.guards.Reference.of(() => State)
			}, {})
		}, {
			"status": autoguard.guards.Integer
		}),
		"sendCommand": autoguard.guards.Object.of({
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({
					"x-wait-ms": autoguard.guards.Integer
				}, {}),
				autoguard.api.Headers
			),
			"payload": autoguard.guards.Object.of({
				"state": autoguard.guards.Reference.of(() => State)
			}, {})
		}, {
			"status": autoguard.guards.Integer
		})
	};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
